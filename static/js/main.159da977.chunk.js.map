{"version":3,"sources":["Scene.js","SceneControls.js","App.js","index.js"],"names":["OrbitControls","threeOrbitControls","THREE","Scene","props","context","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","hoverColor","selectedColor","mouse","raycaster","cameraVectoring","lightPosition","_this2","rendererElement","ReactDOM","findDOMNode","refs","renderer","controls","camera","addEventListener","event","onCameraChange","target","object","position","e","onMouseMove","onMouseDown","dispose","removeEventListener","mouseEvent","x","clientX","containerWidth","y","clientY","getBoundingClientRect","containerHeight","setFromCamera","intersectObjects","scene","children","intersect","getObjectsUnderMouse","onCubeSelect","name","onCubeHover","_this3","cameraPosition","cubeSize","cubes","map","o","color","id","toString","selectedCubeId","hoveredCubeId","react_default","a","createElement","key","depth","height","width","React3_default","antialias","clearColor","mainCamera","ref","aspect","far","fov","lookAt","near","intensity","Component","Dimensions","containerStyle","left","right","top","bottom","BasicControls","className","buttons","icon","intent","Intent","PRIMARY","large","onClick","onAddCube","style","paddingLeft","paddingRight","cubeCount","disabled","isCameraDefault","rightIcon","minimal","onResetCamera","text","marginRight","SizeControls","iconSize","slider","labelStepSize","labelRenderer","max","min","onChange","onValueChange","stepSize","value","isDefaultValue","onResetValue","ActiveObjectControls","popover","Position","BOTTOM_LEFT","WARNING","backgroundColor","selectedCubeColor","lib","disableAlpha","onChangeComplete","onCubeColorChange","BOTTOM_RIGHT","DANGER","html","Classes","POPOVER_DISMISS","onRemoveCube","SceneControls","SceneControls_BasicControls","SceneControls_SizeControls","isCubeDefaultSize","onResetCubeSize","onCubeSizeChange","SceneControls_ActiveObjectControls","App","defaultCubeSize","defaultCameraPosition","idCounter","state","cube","randomColorHex","randomPosition","slice","setState","concat","generateCube","clone","newArray","toConsumableArray","i","length","hex","size","indxToRemove","splice","randomRGBAsHex","Math","random","Number","floor","container","src_SceneControls_0","equals","handleAddCube","handleCubeColorChange","handleCubeSizeChange","handleRemoveCube","handleResetCamera","handleResetCubeSize","src_Scene","handleCameraChange","handleCubeHover","handleCubeSelect","render","src_App_0","document","getElementById"],"mappings":"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","file":"static/js/main.159da977.chunk.js","sourcesContent":["import Dimensions from 'react-dimensions'\r\nimport React, { Component } from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport React3 from 'react-three-renderer';\r\nimport * as THREE from 'three'\r\nimport threeOrbitControls from 'three-orbit-controls';\r\nimport './App.css';\r\n\r\nvar OrbitControls = threeOrbitControls(THREE);\r\n\r\nclass Scene extends Component {\r\n    constructor(props, context) {\r\n        super(props, context);\r\n\r\n        // Use 'new' here rather than within render,\r\n        // otherwise it can mess with React change detection.\r\n        this.hoverColor = '#691919';\r\n        this.selectedColor = '#a50909';\r\n\r\n        this.mouse = new THREE.Vector2();\r\n        this.raycaster = new THREE.Raycaster();\r\n\r\n        this.cameraVectoring = new THREE.Vector3(0, 0, 0);\r\n        this.lightPosition = new THREE.Vector3(3, 13, 16);\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.rendererElement = ReactDOM.findDOMNode(this.refs.renderer);\r\n\r\n        const controls = new OrbitControls(this.refs.camera, this.rendererElement);\r\n        controls.addEventListener('change', (event) => { this.props.onCameraChange(event.target.object.position); });\r\n        this.controls = controls;\r\n\r\n        this.rendererElement.addEventListener('mousemove', (e) => { this.onMouseMove(e); }, false);\r\n        this.rendererElement.addEventListener('mousedown', (e) => { this.onMouseDown(e); }, false);\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        this.controls.dispose();\r\n        delete this.controls;\r\n\r\n        this.rendererElement.removeEventListener('mousemove');\r\n        this.rendererElement.removeEventListener('mousedown');\r\n    }\r\n\r\n    getObjectsUnderMouse(mouseEvent) {\r\n        // Convert to normalized device coordinates (-1 to +1) of renderer 'viewport'\r\n        // TODO: use this.rendererElement.getBoundingClientRect() to make this calculation generic\r\n        this.mouse.x = (mouseEvent.clientX / this.props.containerWidth) * 2 - 1;\r\n        this.mouse.y = - ((mouseEvent.clientY - this.rendererElement.getBoundingClientRect().y) / this.props.containerHeight) * 2 + 1;\r\n        this.raycaster.setFromCamera(this.mouse, this.refs.camera);\r\n\r\n        return this.raycaster.intersectObjects(this.refs.scene.children, false);\r\n    }\r\n\r\n    onMouseDown(event) {\r\n        var intersect = this.getObjectsUnderMouse(event);\r\n        if (intersect[0]) {\r\n            this.props.onCubeSelect(intersect[0].object.name);\r\n        }\r\n    }\r\n\r\n    onMouseMove(event) {\r\n        var intersect = this.getObjectsUnderMouse(event);\r\n        if (intersect[0]) {\r\n            this.props.onCubeHover(intersect[0].object.name);\r\n        } else {\r\n            this.props.onCubeHover(null);\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const cameraPosition = this.props.cameraPosition;\r\n        const containerWidth = this.props.containerWidth;\r\n        const containerHeight = this.props.containerHeight;\r\n        const cubeSize = this.props.cubeSize;\r\n\r\n        const cubes = this.props.cubes.map(o => {\r\n            let color = o.color;\r\n            const id = o.id.toString();\r\n            if (this.props.selectedCubeId === id) {\r\n                color = this.selectedColor;\r\n            } else if (this.props.hoveredCubeId === id) {\r\n                color = this.hoverColor;\r\n            }\r\n            return (<mesh\r\n                key={o.id}\r\n                position={o.position}\r\n                name={id}>\r\n                <boxGeometry\r\n                    depth={cubeSize}\r\n                    height={cubeSize}\r\n                    width={cubeSize}\r\n                />\r\n                <meshLambertMaterial\r\n                    color={color}\r\n                />\r\n            </mesh>);\r\n        });\r\n\r\n        return (\r\n            <React3\r\n                antialias\r\n                clearColor={0x2d2d2d}\r\n                height={containerHeight}\r\n                mainCamera=\"mainCamera\"\r\n                ref=\"renderer\"\r\n                width={containerWidth}\r\n            >\r\n                <scene ref=\"scene\">\r\n                    <perspectiveCamera\r\n                        aspect={containerWidth / containerHeight}\r\n                        far={1000}\r\n                        fov={55}\r\n                        lookAt={this.cameraVectoring}\r\n                        name=\"mainCamera\"\r\n                        near={0.1}\r\n                        position={cameraPosition}\r\n                        ref=\"camera\"\r\n                    />\r\n                    <ambientLight\r\n                        color={0xffffff}\r\n                    />\r\n                    <pointLight\r\n                        color={0xffffff}\r\n                        intensity={0.7}\r\n                        position={this.lightPosition}\r\n                    />\r\n                    {cubes}\r\n                </scene>\r\n            </React3>\r\n        );\r\n    }\r\n}\r\n\r\n// Wrapping scene in element which detects containers size as it changes\r\nexport default Dimensions({ containerStyle: { position: \"absolute\", left: 0, right: 0, top: 0, bottom: 0 } })(Scene)\r\n","import { Button, Icon, Popover, Slider, Classes, Intent, H5, Position } from \"@blueprintjs/core\";\r\nimport React, { Component } from 'react';\r\nimport { ChromePicker } from 'react-color';\r\nimport './SceneControls.css';\r\n\r\nclass BasicControls extends Component {\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<div className=\"controls-row\">\r\n\t\t\t\t<Button\r\n\t\t\t\t\ticon=\"plus\"\r\n\t\t\t\t\tintent={Intent.PRIMARY}\r\n\t\t\t\t\tlarge={true}\r\n\t\t\t\t\tonClick={this.props.onAddCube}\r\n\t\t\t\t/>\r\n\t\t\t\t<span className=\"primary-text ellipsed-text\" style={{ paddingLeft: 24, paddingRight: 18 }}>Cubes in scene: {this.props.cubeCount}</span>\r\n\t\t\t\t<Button\r\n\t\t\t\t\tdisabled={this.props.isCameraDefault}\r\n\t\t\t\t\trightIcon=\"refresh\"\r\n\t\t\t\t\tminimal={true}\r\n\t\t\t\t\tonClick={this.props.onResetCamera}\r\n\t\t\t\t\ttext=\"Camera\"\r\n\t\t\t\t\tstyle={{ marginRight: -4 }}\r\n\t\t\t\t/>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nclass SizeControls extends Component {\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<div className=\"controls-row\">\r\n\t\t\t\t<Icon\r\n\t\t\t\t\ticon=\"symbol-square\"\r\n\t\t\t\t\ticonSize={17}\r\n\t\t\t\t/>\r\n\t\t\t\t<div className=\"slider-container\">\r\n\t\t\t\t\t<Slider\r\n\t\t\t\t\t\tlabelStepSize={9}\r\n\t\t\t\t\t\tlabelRenderer={false}\r\n\t\t\t\t\t\tmax={10.5}\r\n\t\t\t\t\t\tmin={0.5}\r\n\t\t\t\t\t\tonChange={this.props.onValueChange}\r\n\t\t\t\t\t\tstepSize={0.1}\r\n\t\t\t\t\t\tvalue={this.props.value}\r\n\t\t\t\t\t/>\r\n\t\t\t\t</div>\r\n\t\t\t\t<Icon\r\n\t\t\t\t\ticon=\"symbol-square\"\r\n\t\t\t\t\ticonSize={40}\r\n\t\t\t\t/>\r\n\t\t\t\t<Button\r\n\t\t\t\t\tdisabled={this.props.isDefaultValue}\r\n\t\t\t\t\ticon=\"refresh\"\r\n\t\t\t\t\tminimal={true}\r\n\t\t\t\t\tonClick={this.props.onResetValue}\r\n\t\t\t\t/>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nclass ActiveObjectControls extends Component {\r\n\trender() {\r\n\t\tconst id = this.props.selectedCubeId;\r\n\r\n\t\treturn (\r\n\t\t\t<div className=\"active-obj-controls\">\r\n\t\t\t\t<div className=\"controls-row\">\r\n\t\t\t\t\t<span className=\"primary-text ellipsed-text\"> Active Cube\r\n\t\t\t\t\t</span>\r\n\t\t\t\t\t<span><span className=\"primary-text\">ID:</span> {id} </span>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div className=\"controls-row\">\r\n\t\t\t\t\t<Popover\r\n\t\t\t\t\t\tposition={Position.BOTTOM_LEFT}>\r\n\t\t\t\t\t\t<Button\r\n\t\t\t\t\t\t\tclassName=\"color-button\"\r\n\t\t\t\t\t\t\ticon=\"tint\"\r\n\t\t\t\t\t\t\tintent={Intent.WARNING}\r\n\t\t\t\t\t\t\tstyle={{ backgroundColor: this.props.selectedCubeColor }}\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t<div>\r\n\t\t\t\t\t\t\t<ChromePicker\r\n\t\t\t\t\t\t\t\tdisableAlpha={true}\r\n\t\t\t\t\t\t\t\tcolor={this.props.selectedCubeColor}\r\n\t\t\t\t\t\t\t\tonChangeComplete={(color) => { this.props.onCubeColorChange(id, color); }} />\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</Popover>\r\n\t\t\t\t\t<Popover\r\n\t\t\t\t\t\tposition={Position.BOTTOM_RIGHT}>\r\n\t\t\t\t\t\t<Button\r\n\t\t\t\t\t\t\ticon=\"trash\"\r\n\t\t\t\t\t\t\tintent={Intent.DANGER}\r\n\t\t\t\t\t\t\tminimal={true}\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t<div className=\"popover-content\">\r\n\t\t\t\t\t\t\t<H5>Confirm Deletion</H5>\r\n\t\t\t\t\t\t\t<p>Are you sure you want to delete this?</p>\r\n\t\t\t\t\t\t\t<div className=\"popover-buttons\">\r\n\t\t\t\t\t\t\t\t<Button\r\n\t\t\t\t\t\t\t\t\tclassName={Classes.POPOVER_DISMISS}\r\n\t\t\t\t\t\t\t\t\tstyle={{ marginRight: 10 }}>\r\n\t\t\t\t\t\t\t\t\tCancel\r\n                    \t\t\t</Button>\r\n\t\t\t\t\t\t\t\t<Button\r\n\t\t\t\t\t\t\t\t\tintent={Intent.DANGER}\r\n\t\t\t\t\t\t\t\t\tclassName={Classes.POPOVER_DISMISS}\r\n\t\t\t\t\t\t\t\t\tonClick={() => this.props.onRemoveCube(id)}>\r\n\t\t\t\t\t\t\t\t\tDelete\r\n                    \t\t\t</Button>\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</Popover>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nclass SceneControls extends Component {\r\n\trender() {\r\n\t\tconst selectedCubeId = this.props.selectedCubeId;\r\n\r\n\t\treturn (\r\n\t\t\t<div className=\"scene-controls\">\r\n\t\t\t\t<BasicControls\r\n\t\t\t\t\tcubeCount={this.props.cubeCount}\r\n\t\t\t\t\tonAddCube={this.props.onAddCube}\r\n\t\t\t\t\tonResetCamera={this.props.onResetCamera}\r\n\t\t\t\t\tisCameraDefault={this.props.isCameraDefault}\r\n\t\t\t\t/>\r\n\t\t\t\t<SizeControls\r\n\t\t\t\t\tisDefaultValue={this.props.isCubeDefaultSize}\r\n\t\t\t\t\tonResetValue={this.props.onResetCubeSize}\r\n\t\t\t\t\tonValueChange={this.props.onCubeSizeChange}\r\n\t\t\t\t\tvalue={this.props.cubeSize}\r\n\t\t\t\t/>\r\n\t\t\t\t{selectedCubeId &&\r\n\t\t\t\t\t<ActiveObjectControls\r\n\t\t\t\t\t\tonCubeColorChange={this.props.onCubeColorChange}\r\n\t\t\t\t\t\tonRemoveCube={this.props.onRemoveCube}\r\n\t\t\t\t\t\tselectedCubeColor={this.props.selectedCubeColor}\r\n\t\t\t\t\t\tselectedCubeId={selectedCubeId}\r\n\t\t\t\t\t/>}\r\n\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default SceneControls;\r\n","import React, { Component } from 'react';\nimport * as THREE from 'three'\nimport './App.css';\nimport Scene from './Scene.js';\nimport SceneControls from './SceneControls';\n\nclass App extends Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\n\t\tthis.defaultCubeSize = 5.5;\n\t\tthis.defaultCameraPosition = new THREE.Vector3(30, 24, 45);\n\t\tthis.idCounter = 0;\n\n\t\tthis.state = {\n\t\t\tcameraPosition: this.defaultCameraPosition,\n\t\t\tcubes: [],\n\t\t\tcubeSize: this.defaultCubeSize,\n\t\t\thoveredCubeId: null,\n\t\t\tselectedCubeColor: '',\n\t\t\tselectedCubeId: null\n\t\t}\n\t}\n\n\tgenerateCube() {\n\t\tconst cube = {\n\t\t\tcolor: this.randomColorHex(),\n\t\t\tid: this.idCounter,\n\t\t\tposition: this.randomPosition()\n\t\t};\n\t\tthis.idCounter++;\n\t\treturn cube;\n\t}\n\n\thandleAddCube() {\n\t\tconst cubes = this.state.cubes.slice();\n\t\tthis.setState({\n\t\t\tcubes: cubes.concat([this.generateCube()])\n\t\t});\n\t}\n\n\thandleCameraChange(position) {\n\t\tthis.setState({\n\t\t\tcameraPosition: position.clone()\n\t\t});\n\t}\n\n\thandleCubeColorChange(id, color) {\n\t\tlet newArray = [...this.state.cubes];\n\t\tfor (let i = 0; i < newArray.length; i++) {\n\t\t\tif (newArray[i].id.toString() === id) {\n\t\t\t\tnewArray[i].color = color.hex;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tthis.setState({\n\t\t\tcubes: newArray,\n\t\t\tselectedCubeColor: color.hex\n\t\t});\n\t}\n\n\thandleCubeHover(id) {\n\t\tif (id !== this.state.hoveredCubeId) {\n\t\t\tthis.setState({\n\t\t\t\thoveredCubeId: id\n\t\t\t});\n\t\t}\n\t}\n\n\thandleCubeSelect(id) {\n\t\tif (id !== this.state.selectedCubeId) {\n\t\t\tlet selectedCubeColor;\n\t\t\tfor (let i = 0; i < this.state.cubes.length; i++) {\n\t\t\t\tif (this.state.cubes[i].id.toString() === id) {\n\t\t\t\t\tselectedCubeColor = this.state.cubes[i].color;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tthis.setState({\n\t\t\t\tselectedCubeId: id,\n\t\t\t\tselectedCubeColor: selectedCubeColor\n\t\t\t});\n\t\t}\n\t}\n\n\thandleCubeSizeChange(size) {\n\t\tthis.setState({\n\t\t\tcubeSize: size\n\t\t});\n\t}\n\n\thandleRemoveCube(id) {\n\t\tlet cubes = [...this.state.cubes];\n\t\tlet indxToRemove;\n\t\tfor (let i = 0; i < cubes.length; i++) {\n\t\t\tif (cubes[i].id.toString() === id) {\n\t\t\t\tindxToRemove = i;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\tif (indxToRemove != null) {\n\t\t\tcubes.splice(indxToRemove, 1);\n\t\t\tthis.setState({\n\t\t\t\tcubes: cubes,\n\t\t\t\tselectedCubeId: null\n\t\t\t});\n\t\t}\n\t}\n\n\thandleResetCamera() {\n\t\tthis.setState({\n\t\t\tcameraPosition: this.defaultCameraPosition.clone()\n\t\t});\n\t}\n\n\thandleResetCubeSize() {\n\t\tthis.setState({\n\t\t\tcubeSize: this.defaultCubeSize\n\t\t});\n\t}\n\n\trandomColorHex() {\n\t\treturn '#' + this.randomRGBAsHex() + this.randomRGBAsHex() + this.randomRGBAsHex();\n\t}\n\n\trandomPosition() {\n\t\treturn new THREE.Vector3((Math.random() * 40) - 20, (Math.random() * 40) - 20, (Math.random() * 40) - 20);\n\t}\n\n\trandomRGBAsHex() {\n\t\tlet hex = Number(Math.floor(Math.random() * 256)).toString(16);\n\t\treturn (hex.length < 2) ? \"0\" + hex : hex;\n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t<div className=\"App\" ref={(container) => { this.container = container }}>\n\t\t\t\t<SceneControls\n\t\t\t\t\tcubeCount={this.state.cubes.length}\n\t\t\t\t\tcubeSize={this.state.cubeSize}\n\t\t\t\t\tisCameraDefault={this.state.cameraPosition.equals(this.defaultCameraPosition)}\n\t\t\t\t\tisCubeDefaultSize={(this.state.cubeSize === this.defaultCubeSize)}\n\t\t\t\t\tonAddCube={() => { this.handleAddCube(); }}\n\t\t\t\t\tonCubeColorChange={(id, color) => { this.handleCubeColorChange(id, color); }}\n\t\t\t\t\tonCubeSizeChange={(size) => { this.handleCubeSizeChange(size); }}\n\t\t\t\t\tonRemoveCube={(id) => { this.handleRemoveCube(id); }}\n\t\t\t\t\tonResetCamera={() => { this.handleResetCamera(); }}\n\t\t\t\t\tonResetCubeSize={() => { this.handleResetCubeSize(); }}\n\t\t\t\t\tselectedCubeColor={this.state.selectedCubeColor}\n\t\t\t\t\tselectedCubeId={this.state.selectedCubeId}\n\t\t\t\t/>\n\t\t\t\t<div className=\"scene-container\">\n\t\t\t\t\t<Scene\n\t\t\t\t\t\tcameraPosition={this.state.cameraPosition}\n\t\t\t\t\t\tcubes={this.state.cubes}\n\t\t\t\t\t\tcubeSize={this.state.cubeSize}\n\t\t\t\t\t\thoveredCubeId={this.state.hoveredCubeId}\n\t\t\t\t\t\tonCameraChange={(position) => { this.handleCameraChange(position); }}\n\t\t\t\t\t\tonCubeHover={(id) => { this.handleCubeHover(id); }}\n\t\t\t\t\t\tonCubeSelect={(id) => { this.handleCubeSelect(id); }}\n\t\t\t\t\t\tselectedCubeId={this.state.selectedCubeId}\n\t\t\t\t\t/>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n\t<App />,\n\tdocument.getElementById('root')\n);\n"],"sourceRoot":""}